datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(USER)

  station        Station?
  fleets         Fleet[]      @relation("ownerRelation")
  buildJobs     BuildJob[]
  Account        Account[]
  Session        Session[]
  notifications Notification[]
  sentMessages  Message[]
  chats         Chat[]
  Commandship   Commandship[]
  Alliance      Alliance?      @relation(fields: [allianceId], references: [id])
  allianceId    String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Station {
  id            String     @id @default(uuid())
  name          String     @unique
  owner         User       @relation(fields: [ownerId], references: [id])
  ownerId       String     @unique
  resources     Resource   @relation(fields: [resourcesId], references: [id])
  resourcesId   String     @unique
  coordinates   Coordinate @relation(fields: [coordinatesId], references: [id])
  coordinatesId String     @unique
  harvesters    Int        @default(10)
  distribution  Int[]      @default([50, 30])
  activeResourceNodes ResourceNode[]
  fleets              Fleet[]        @relation("fleetsInStation")
  incomingFleets      Fleet[]        @relation("incomingFleets")
}

model Fleet {
  id            String           @id @default(uuid())
  owner         User             @relation("ownerRelation", fields: [ownerId], references: [id])
  ownerId       String
  inStation     Station?         @relation(name: "fleetsInStation", references: [id], fields: [stationId])
  stationId     String?
  baseFleet     Boolean          @default(false)
  ships         ShipGroup[]
  resources     Resource         @relation(fields: [resourcesId], references: [id])
  resourcesId   String           @unique
  target        Station?         @relation(name: "incomingFleets", references: [id], fields: [targetId])
  targetId      String?
  travelTime    Int?
  remainingTime Int?
  action        FleetActionType?
  actionTime    Int?
  returning     Boolean?
}

model ShipGroup {
  id      String   @id @default(uuid())
  fleet   Fleet    @relation(fields: [fleetId], references: [id])
  fleetId String
  type    ShipType
  amount  Int

  @@unique([fleetId, type])
}

model Resource {
  id        String   @id @default(uuid())
  aluminium Int      @default(0)
  steel     Int      @default(0)
  plutonium Int      @default(0)
  station   Station?
  fleet     Fleet?
}

model ResourceNode {
  id            String       @id @default(uuid())
  type          ResourceType
  coordinates   Coordinate   @relation(fields: [coordinatesId], references: [id])
  coordinatesId String       @unique
  Station       Station?     @relation(fields: [stationId], references: [id])
  stationId     String?
}

model Coordinate {
  id           String        @id @default(uuid())
  x            Int
  y            Int
  station      Station?
  resourceNode ResourceNode?

  @@unique([x, y])
}

model BuildJob {
  id            String         @id @default(uuid())
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String
  type          BuildJobType
  what          ShipType
  amount        Int
  remainingTime Int
}

enum NotificationType {
  INFO
  ALERT
}

model Notification {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id      String           @id @default(uuid())
  type    NotificationType
  title   String
  content String
}

model Commandship {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id         String @id @default(uuid())
  level      Int    @default(1)
  experience Int    @default(0)
}

model Message {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  chat   Chat   @relation(references: [id], fields: [chatId])
  chatId String

  id      String @id @default(uuid())
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id   String  @id @default(uuid())
  name String?

  messages Message[]
  members  User[]
  public   Boolean

  updatedAt DateTime @updatedAt
}

model Alliance {
  id   String @id @default(uuid())
  name String

  members User[]
}

// enums

enum ResourceType {
  Aluminium
  Steel
  Plutonium
}

enum ShipType {
  Piranha
  Jellyfish
  Shark
  HackBoat
  Taifun
  Blizzard
  Hurricane
  Tsunami
  Enterprise
  Bermuda
  KittyHawk
  Atlantis
}

enum FightType {
  Normal
  Emp
  FirstStrike
}

enum BuildJobType {
  Ship
  Harvester
}

enum FleetActionType {
  Attack
  Defend
}
